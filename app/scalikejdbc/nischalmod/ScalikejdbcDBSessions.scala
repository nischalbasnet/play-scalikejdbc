package scalikejdbc.nischalmod

/**
  * Created by nbasnet on 6/10/17.
  */
object ScalikejdbcDBSessions
{

}

///**
//  * Autosession to return string primarykey
//  */
//trait StringDBSession extends DBSession
//{
//  /**
//    * Executes java.sql.PreparedStatement#executeUpdate() and returns the generated key.
//    *
//    * @param template SQL template
//    * @param params   parameters
//    *
//    * @return generated key as a long value
//    */
//  override def updateAndReturnGeneratedKey(template: String, params: Any*): String =
//  {
//    updateAndReturnSpecifiedGeneratedKey(template, params: _*)(1)
//  }
//
//  /**
//    * Executes java.sql.PreparedStatement#executeUpdate() and returns the generated key.
//    *
//    * @param template SQL template
//    * @param params   parameters
//    * @param key      name
//    *
//    * @return generated key as a long value
//    */
//  override def updateAndReturnSpecifiedGeneratedKey(template: String, params: Any*)(key: Any): String =
//  {
//    var generatedKeyFound = false
//    var generatedKey: String = ""
//    val before = (stmt: PreparedStatement) => {}
//    val after = (stmt: PreparedStatement) => {
//      val rs = stmt.getGeneratedKeys
//      while (rs.next()) {
//        generatedKeyFound = true
//        generatedKey = key match {
//          case name: String => try {
//            rs.getString(name)
//          } catch {
//            case e: Exception =>
//              log.warn("Failed to get generated key value via index " + name + ". Going to retrieve it via index 1.")
//              rs.getString(1)
//          }
//          case index: Int => try {
//            rs.getString(index)
//          } catch {
//            case e: Exception =>
//              log.warn("Failed to get generated key value via index " + index + ". Going to retrieve it via index 1.")
//              rs.getString(1)
//          }
//          case _ => throw new IllegalArgumentException("Failed to retrieve the generated key. (key:" + key + ")")
//        }
//      }
//    }
//    key match {
//      case k: String => updateWithAutoGeneratedKeyNameAndFilters(true, k, before, after, template, params: _*)
//      case _ => updateWithFilters(true, before, after, template, params: _*)
//    }
//    if (!generatedKeyFound) {
//      throw new IllegalStateException("FAILED_TO_RETRIEVE_GENERATED_KEY (template:" + template + ")")
//    }
//    generatedKey
//  }
//}
